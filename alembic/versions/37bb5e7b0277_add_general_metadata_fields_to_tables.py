"""Add metadata fields to existing tables

Revision ID: 37bb5e7b0277
Revises: f4634ab743c4
Create Date: 2024-12-06 00:51:42.544217

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from core.types import BooleanInteger

# revision identifiers, used by Alembic.
revision: str = '37bb5e7b0277'
down_revision: Union[str, None] = 'f4634ab743c4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE OR REPLACE FUNCTION set_updated_at()\nRETURNS trigger AS $$\nBEGIN\nNEW.updated_at = timezone('utc', now());\nRETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;")
    with op.batch_alter_table('buildings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('notes', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('is_active', BooleanInteger(), server_default='1', nullable=False))
        batch_op.add_column(sa.Column('is_flagged', BooleanInteger(), server_default='0', nullable=False))
        batch_op.add_column(sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc', now())"), nullable=False))
        batch_op.add_column(sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc', now())"), nullable=False))
        batch_op.create_index(batch_op.f('ix_buildings_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_buildings_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_buildings_is_flagged'), ['is_flagged'], unique=False)

    with op.batch_alter_table('insurances', schema=None) as batch_op:
        batch_op.add_column(sa.Column('notes', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('is_active', BooleanInteger(), server_default='1', nullable=False))
        batch_op.add_column(sa.Column('is_flagged', BooleanInteger(), server_default='0', nullable=False))
        batch_op.add_column(sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc', now())"), nullable=False))
        batch_op.add_column(sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc', now())"), nullable=False))
        batch_op.create_index(batch_op.f('ix_insurances_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_insurances_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_insurances_is_flagged'), ['is_flagged'], unique=False)

    with op.batch_alter_table('leases', schema=None) as batch_op:
        batch_op.add_column(sa.Column('notes', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('is_active', BooleanInteger(), server_default='1', nullable=False))
        batch_op.add_column(sa.Column('is_flagged', BooleanInteger(), server_default='0', nullable=False))
        batch_op.add_column(sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc', now())"), nullable=False))
        batch_op.add_column(sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc', now())"), nullable=False))
        batch_op.create_index(batch_op.f('ix_leases_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_leases_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_leases_is_flagged'), ['is_flagged'], unique=False)

    with op.batch_alter_table('properties', schema=None) as batch_op:
        batch_op.add_column(sa.Column('notes', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('is_active', BooleanInteger(), server_default='1', nullable=False))
        batch_op.add_column(sa.Column('is_flagged', BooleanInteger(), server_default='0', nullable=False))
        batch_op.add_column(sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc', now())"), nullable=False))
        batch_op.add_column(sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc', now())"), nullable=False))
        batch_op.create_index(batch_op.f('ix_properties_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_properties_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_properties_is_flagged'), ['is_flagged'], unique=False)

    with op.batch_alter_table('tenants', schema=None) as batch_op:
        batch_op.add_column(sa.Column('notes', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('is_active', BooleanInteger(), server_default='1', nullable=False))
        batch_op.add_column(sa.Column('is_flagged', BooleanInteger(), server_default='0', nullable=False))
        batch_op.add_column(sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc', now())"), nullable=False))
        batch_op.add_column(sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc', now())"), nullable=False))
        batch_op.create_index(batch_op.f('ix_tenants_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_tenants_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_tenants_is_flagged'), ['is_flagged'], unique=False)

    with op.batch_alter_table('units', schema=None) as batch_op:
        batch_op.add_column(sa.Column('notes', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('is_active', BooleanInteger(), server_default='1', nullable=False))
        batch_op.add_column(sa.Column('is_flagged', BooleanInteger(), server_default='0', nullable=False))
        batch_op.add_column(sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc', now())"), nullable=False))
        batch_op.add_column(sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc', now())"), nullable=False))
        batch_op.create_index(batch_op.f('ix_units_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_units_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_units_is_flagged'), ['is_flagged'], unique=False)

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('notes', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('is_flagged', BooleanInteger(), server_default='0', nullable=False))
        batch_op.add_column(sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc', now())"), nullable=False))
        batch_op.add_column(sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc', now())"), nullable=False))
        batch_op.create_index(batch_op.f('ix_users_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_is_flagged'), ['is_flagged'], unique=False)

    op.execute('CREATE TRIGGER update_timestamp\nBEFORE UPDATE ON users\nFOR EACH ROW\nEXECUTE FUNCTION set_updated_at();')
    op.execute('CREATE TRIGGER update_timestamp\nBEFORE UPDATE ON units\nFOR EACH ROW\nEXECUTE FUNCTION set_updated_at();')
    op.execute('CREATE TRIGGER update_timestamp\nBEFORE UPDATE ON insurances\nFOR EACH ROW\nEXECUTE FUNCTION set_updated_at();')
    op.execute('CREATE TRIGGER update_timestamp\nBEFORE UPDATE ON tenants\nFOR EACH ROW\nEXECUTE FUNCTION set_updated_at();')
    op.execute('CREATE TRIGGER update_timestamp\nBEFORE UPDATE ON leases\nFOR EACH ROW\nEXECUTE FUNCTION set_updated_at();')
    op.execute('CREATE TRIGGER update_timestamp\nBEFORE UPDATE ON buildings\nFOR EACH ROW\nEXECUTE FUNCTION set_updated_at();')
    op.execute('CREATE TRIGGER update_timestamp\nBEFORE UPDATE ON properties\nFOR EACH ROW\nEXECUTE FUNCTION set_updated_at();')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_is_flagged'))
        batch_op.drop_index(batch_op.f('ix_users_is_active'))
        batch_op.drop_index(batch_op.f('ix_users_created_at'))
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')
        batch_op.drop_column('is_flagged')
        batch_op.drop_column('notes')

    with op.batch_alter_table('units', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_units_is_flagged'))
        batch_op.drop_index(batch_op.f('ix_units_is_active'))
        batch_op.drop_index(batch_op.f('ix_units_created_at'))
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')
        batch_op.drop_column('is_flagged')
        batch_op.drop_column('is_active')
        batch_op.drop_column('notes')

    with op.batch_alter_table('tenants', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tenants_is_flagged'))
        batch_op.drop_index(batch_op.f('ix_tenants_is_active'))
        batch_op.drop_index(batch_op.f('ix_tenants_created_at'))
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')
        batch_op.drop_column('is_flagged')
        batch_op.drop_column('is_active')
        batch_op.drop_column('notes')

    with op.batch_alter_table('properties', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_properties_is_flagged'))
        batch_op.drop_index(batch_op.f('ix_properties_is_active'))
        batch_op.drop_index(batch_op.f('ix_properties_created_at'))
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')
        batch_op.drop_column('is_flagged')
        batch_op.drop_column('is_active')
        batch_op.drop_column('notes')

    with op.batch_alter_table('leases', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_leases_is_flagged'))
        batch_op.drop_index(batch_op.f('ix_leases_is_active'))
        batch_op.drop_index(batch_op.f('ix_leases_created_at'))
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')
        batch_op.drop_column('is_flagged')
        batch_op.drop_column('is_active')
        batch_op.drop_column('notes')

    with op.batch_alter_table('insurances', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_insurances_is_flagged'))
        batch_op.drop_index(batch_op.f('ix_insurances_is_active'))
        batch_op.drop_index(batch_op.f('ix_insurances_created_at'))
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')
        batch_op.drop_column('is_flagged')
        batch_op.drop_column('is_active')
        batch_op.drop_column('notes')

    with op.batch_alter_table('buildings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_buildings_is_flagged'))
        batch_op.drop_index(batch_op.f('ix_buildings_is_active'))
        batch_op.drop_index(batch_op.f('ix_buildings_created_at'))
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')
        batch_op.drop_column('is_flagged')
        batch_op.drop_column('is_active')
        batch_op.drop_column('notes')

    op.execute('DROP TRIGGER IF EXISTS update_timestamp ON users;')
    op.execute('DROP TRIGGER IF EXISTS update_timestamp ON units;')
    op.execute('DROP TRIGGER IF EXISTS update_timestamp ON insurances;')
    op.execute('DROP TRIGGER IF EXISTS update_timestamp ON tenants;')
    op.execute('DROP TRIGGER IF EXISTS update_timestamp ON leases;')
    op.execute('DROP TRIGGER IF EXISTS update_timestamp ON buildings;')
    op.execute('DROP TRIGGER IF EXISTS update_timestamp ON properties;')
    # ### end Alembic commands ###
